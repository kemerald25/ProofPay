/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ProofPayEscrowInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "AUTO_RELEASE_PERIOD"
      | "USDC"
      | "autoRelease"
      | "createEscrow"
      | "escrows"
      | "feeCollector"
      | "fundEscrow"
      | "getEscrow"
      | "owner"
      | "ownerReleaseFunds"
      | "platformFeeBps"
      | "raiseDispute"
      | "releaseFunds"
      | "renounceOwnership"
      | "resolveDispute"
      | "transferOwnership"
      | "updateFeeCollector"
      | "updatePlatformFee"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AutoReleaseExecuted"
      | "DisputeRaised"
      | "DisputeResolved"
      | "EscrowCompleted"
      | "EscrowCreated"
      | "EscrowFunded"
      | "EscrowRefunded"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "AUTO_RELEASE_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "USDC", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "autoRelease",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createEscrow",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "escrows", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "feeCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fundEscrow",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEscrow",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerReleaseFunds",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "platformFeeBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "raiseDispute",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseFunds",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resolveDispute",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFeeCollector",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePlatformFee",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "AUTO_RELEASE_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "USDC", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "autoRelease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "escrows", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fundEscrow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getEscrow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerReleaseFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "platformFeeBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "raiseDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFeeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePlatformFee",
    data: BytesLike
  ): Result;
}

export namespace AutoReleaseExecutedEvent {
  export type InputTuple = [escrowId: BytesLike];
  export type OutputTuple = [escrowId: string];
  export interface OutputObject {
    escrowId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DisputeRaisedEvent {
  export type InputTuple = [escrowId: BytesLike, raisedBy: AddressLike];
  export type OutputTuple = [escrowId: string, raisedBy: string];
  export interface OutputObject {
    escrowId: string;
    raisedBy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DisputeResolvedEvent {
  export type InputTuple = [
    escrowId: BytesLike,
    buyerAmount: BigNumberish,
    sellerAmount: BigNumberish
  ];
  export type OutputTuple = [
    escrowId: string,
    buyerAmount: bigint,
    sellerAmount: bigint
  ];
  export interface OutputObject {
    escrowId: string;
    buyerAmount: bigint;
    sellerAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EscrowCompletedEvent {
  export type InputTuple = [
    escrowId: BytesLike,
    amountToSeller: BigNumberish,
    platformFee: BigNumberish
  ];
  export type OutputTuple = [
    escrowId: string,
    amountToSeller: bigint,
    platformFee: bigint
  ];
  export interface OutputObject {
    escrowId: string;
    amountToSeller: bigint;
    platformFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EscrowCreatedEvent {
  export type InputTuple = [
    escrowId: BytesLike,
    buyer: AddressLike,
    seller: AddressLike,
    amount: BigNumberish,
    autoReleaseTime: BigNumberish
  ];
  export type OutputTuple = [
    escrowId: string,
    buyer: string,
    seller: string,
    amount: bigint,
    autoReleaseTime: bigint
  ];
  export interface OutputObject {
    escrowId: string;
    buyer: string;
    seller: string;
    amount: bigint;
    autoReleaseTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EscrowFundedEvent {
  export type InputTuple = [escrowId: BytesLike, amount: BigNumberish];
  export type OutputTuple = [escrowId: string, amount: bigint];
  export interface OutputObject {
    escrowId: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EscrowRefundedEvent {
  export type InputTuple = [escrowId: BytesLike, amount: BigNumberish];
  export type OutputTuple = [escrowId: string, amount: bigint];
  export interface OutputObject {
    escrowId: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ProofPayEscrow extends BaseContract {
  connect(runner?: ContractRunner | null): ProofPayEscrow;
  waitForDeployment(): Promise<this>;

  interface: ProofPayEscrowInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  AUTO_RELEASE_PERIOD: TypedContractMethod<[], [bigint], "view">;

  USDC: TypedContractMethod<[], [string], "view">;

  autoRelease: TypedContractMethod<[escrowId: BytesLike], [void], "nonpayable">;

  createEscrow: TypedContractMethod<
    [buyer: AddressLike, seller: AddressLike, amount: BigNumberish],
    [string],
    "nonpayable"
  >;

  escrows: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, bigint, bigint, bigint, bigint, boolean, string] & {
        buyer: string;
        seller: string;
        amount: bigint;
        createdAt: bigint;
        autoReleaseTime: bigint;
        status: bigint;
        disputeRaised: boolean;
        disputeRaisedBy: string;
      }
    ],
    "view"
  >;

  feeCollector: TypedContractMethod<[], [string], "view">;

  fundEscrow: TypedContractMethod<[escrowId: BytesLike], [void], "nonpayable">;

  getEscrow: TypedContractMethod<
    [escrowId: BytesLike],
    [
      [string, string, bigint, bigint, bigint, bigint, boolean] & {
        buyer: string;
        seller: string;
        amount: bigint;
        createdAt: bigint;
        autoReleaseTime: bigint;
        status: bigint;
        disputeRaised: boolean;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  ownerReleaseFunds: TypedContractMethod<
    [escrowId: BytesLike],
    [void],
    "nonpayable"
  >;

  platformFeeBps: TypedContractMethod<[], [bigint], "view">;

  raiseDispute: TypedContractMethod<
    [escrowId: BytesLike],
    [void],
    "nonpayable"
  >;

  releaseFunds: TypedContractMethod<
    [escrowId: BytesLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  resolveDispute: TypedContractMethod<
    [escrowId: BytesLike, buyerPercentage: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateFeeCollector: TypedContractMethod<
    [newCollector: AddressLike],
    [void],
    "nonpayable"
  >;

  updatePlatformFee: TypedContractMethod<
    [newFeeBps: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "AUTO_RELEASE_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "USDC"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "autoRelease"
  ): TypedContractMethod<[escrowId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createEscrow"
  ): TypedContractMethod<
    [buyer: AddressLike, seller: AddressLike, amount: BigNumberish],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "escrows"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, bigint, bigint, bigint, bigint, boolean, string] & {
        buyer: string;
        seller: string;
        amount: bigint;
        createdAt: bigint;
        autoReleaseTime: bigint;
        status: bigint;
        disputeRaised: boolean;
        disputeRaisedBy: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "feeCollector"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "fundEscrow"
  ): TypedContractMethod<[escrowId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getEscrow"
  ): TypedContractMethod<
    [escrowId: BytesLike],
    [
      [string, string, bigint, bigint, bigint, bigint, boolean] & {
        buyer: string;
        seller: string;
        amount: bigint;
        createdAt: bigint;
        autoReleaseTime: bigint;
        status: bigint;
        disputeRaised: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerReleaseFunds"
  ): TypedContractMethod<[escrowId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "platformFeeBps"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "raiseDispute"
  ): TypedContractMethod<[escrowId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "releaseFunds"
  ): TypedContractMethod<[escrowId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resolveDispute"
  ): TypedContractMethod<
    [escrowId: BytesLike, buyerPercentage: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateFeeCollector"
  ): TypedContractMethod<[newCollector: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePlatformFee"
  ): TypedContractMethod<[newFeeBps: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "AutoReleaseExecuted"
  ): TypedContractEvent<
    AutoReleaseExecutedEvent.InputTuple,
    AutoReleaseExecutedEvent.OutputTuple,
    AutoReleaseExecutedEvent.OutputObject
  >;
  getEvent(
    key: "DisputeRaised"
  ): TypedContractEvent<
    DisputeRaisedEvent.InputTuple,
    DisputeRaisedEvent.OutputTuple,
    DisputeRaisedEvent.OutputObject
  >;
  getEvent(
    key: "DisputeResolved"
  ): TypedContractEvent<
    DisputeResolvedEvent.InputTuple,
    DisputeResolvedEvent.OutputTuple,
    DisputeResolvedEvent.OutputObject
  >;
  getEvent(
    key: "EscrowCompleted"
  ): TypedContractEvent<
    EscrowCompletedEvent.InputTuple,
    EscrowCompletedEvent.OutputTuple,
    EscrowCompletedEvent.OutputObject
  >;
  getEvent(
    key: "EscrowCreated"
  ): TypedContractEvent<
    EscrowCreatedEvent.InputTuple,
    EscrowCreatedEvent.OutputTuple,
    EscrowCreatedEvent.OutputObject
  >;
  getEvent(
    key: "EscrowFunded"
  ): TypedContractEvent<
    EscrowFundedEvent.InputTuple,
    EscrowFundedEvent.OutputTuple,
    EscrowFundedEvent.OutputObject
  >;
  getEvent(
    key: "EscrowRefunded"
  ): TypedContractEvent<
    EscrowRefundedEvent.InputTuple,
    EscrowRefundedEvent.OutputTuple,
    EscrowRefundedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "AutoReleaseExecuted(bytes32)": TypedContractEvent<
      AutoReleaseExecutedEvent.InputTuple,
      AutoReleaseExecutedEvent.OutputTuple,
      AutoReleaseExecutedEvent.OutputObject
    >;
    AutoReleaseExecuted: TypedContractEvent<
      AutoReleaseExecutedEvent.InputTuple,
      AutoReleaseExecutedEvent.OutputTuple,
      AutoReleaseExecutedEvent.OutputObject
    >;

    "DisputeRaised(bytes32,address)": TypedContractEvent<
      DisputeRaisedEvent.InputTuple,
      DisputeRaisedEvent.OutputTuple,
      DisputeRaisedEvent.OutputObject
    >;
    DisputeRaised: TypedContractEvent<
      DisputeRaisedEvent.InputTuple,
      DisputeRaisedEvent.OutputTuple,
      DisputeRaisedEvent.OutputObject
    >;

    "DisputeResolved(bytes32,uint256,uint256)": TypedContractEvent<
      DisputeResolvedEvent.InputTuple,
      DisputeResolvedEvent.OutputTuple,
      DisputeResolvedEvent.OutputObject
    >;
    DisputeResolved: TypedContractEvent<
      DisputeResolvedEvent.InputTuple,
      DisputeResolvedEvent.OutputTuple,
      DisputeResolvedEvent.OutputObject
    >;

    "EscrowCompleted(bytes32,uint256,uint256)": TypedContractEvent<
      EscrowCompletedEvent.InputTuple,
      EscrowCompletedEvent.OutputTuple,
      EscrowCompletedEvent.OutputObject
    >;
    EscrowCompleted: TypedContractEvent<
      EscrowCompletedEvent.InputTuple,
      EscrowCompletedEvent.OutputTuple,
      EscrowCompletedEvent.OutputObject
    >;

    "EscrowCreated(bytes32,address,address,uint256,uint256)": TypedContractEvent<
      EscrowCreatedEvent.InputTuple,
      EscrowCreatedEvent.OutputTuple,
      EscrowCreatedEvent.OutputObject
    >;
    EscrowCreated: TypedContractEvent<
      EscrowCreatedEvent.InputTuple,
      EscrowCreatedEvent.OutputTuple,
      EscrowCreatedEvent.OutputObject
    >;

    "EscrowFunded(bytes32,uint256)": TypedContractEvent<
      EscrowFundedEvent.InputTuple,
      EscrowFundedEvent.OutputTuple,
      EscrowFundedEvent.OutputObject
    >;
    EscrowFunded: TypedContractEvent<
      EscrowFundedEvent.InputTuple,
      EscrowFundedEvent.OutputTuple,
      EscrowFundedEvent.OutputObject
    >;

    "EscrowRefunded(bytes32,uint256)": TypedContractEvent<
      EscrowRefundedEvent.InputTuple,
      EscrowRefundedEvent.OutputTuple,
      EscrowRefundedEvent.OutputObject
    >;
    EscrowRefunded: TypedContractEvent<
      EscrowRefundedEvent.InputTuple,
      EscrowRefundedEvent.OutputTuple,
      EscrowRefundedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
