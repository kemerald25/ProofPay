'use client';

import React, { useState, useRef, useEffect } from 'react';
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { useToast } from "@/hooks/use-toast";
import { Loader2, User, Bot } from 'lucide-react';

interface Message {
  from: 'user' | 'bot';
  text: string;
  phone: string;
}

const CHAT_STORAGE_KEY = 'whatsapp-simulator-chat';

export default function WhatsAppSimulatorPage() {
  const [phone, setPhone] = useState('+15550001');
  const [message, setMessage] = useState('');
  const [chat, setChat] = useState<Message[]>([]);
  const [isSending, setIsSending] = useState(false);
  const { toast } = useToast();
  const chatEndRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    try {
      const savedChat = localStorage.getItem(CHAT_STORAGE_KEY);
      if (savedChat) {
        setChat(JSON.parse(savedChat));
      }
    } catch (error) {
      console.error("Failed to load chat from local storage", error);
    }
  }, []);

  useEffect(() => {
    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });
    try {
        localStorage.setItem(CHAT_STORAGE_KEY, JSON.stringify(chat));
    } catch (error) {
        console.error("Failed to save chat to local storage", error);
    }
  }, [chat]);

  const handleSendMessage = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!message.trim() || !phone.trim()) return;

    setIsSending(true);

    const userMessage: Message = { from: 'user', text: message, phone: phone };
    setChat(prev => [...prev, userMessage]);

    try {
      const response = await fetch('/api/simulator', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ from: phone, message }),
      });

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.message || 'An error occurred.');
      }
      
      if (result.replies && result.replies.length > 0) {
        const botMessages: Message[] = result.replies.map((reply: any) => ({
          from: 'bot',
          text: reply.body,
          phone: reply.to
        }));
        setChat(prev => [...prev, ...botMessages]);
      } else {
         const botMessage: Message = { from: 'bot', text: "No reply was generated by the server. This usually means the command was accepted.", phone: 'System' };
         setChat(prev => [...prev, botMessage]);
      }

    } catch (error: any) {
      toast({
        variant: 'destructive',
        title: 'Error',
        description: error.message,
      });
       const errorMessage: Message = { from: 'bot', text: `Error: ${error.message}`, phone: 'System' };
       setChat(prev => [...prev, errorMessage]);
    }

    setMessage('');
    setIsSending(false);
  };

  return (
    <div className="space-y-6 h-[calc(100vh-100px)] flex flex-col">
      <h1 className="text-3xl font-bold font-headline">WhatsApp Simulator</h1>
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 flex-1">
        <div className="lg:col-span-2 flex flex-col">
          <Card className="flex-1 flex flex-col">
            <CardHeader>
              <CardTitle>Chat Window</CardTitle>
            </CardHeader>
            <CardContent className="flex-1 overflow-y-auto p-4 space-y-4">
              {chat.map((msg, index) => (
                <div key={index} className={`flex items-start gap-3 ${msg.from === 'user' ? 'justify-end' : ''}`}>
                  {msg.from === 'bot' && <Bot className="h-8 w-8 text-primary" />}
                  <div className={`rounded-lg p-3 max-w-md ${msg.from === 'user' ? 'bg-primary text-primary-foreground' : 'bg-secondary'}`}>
                    <p className="text-sm font-medium whitespace-pre-wrap">{msg.text}</p>
                    <p className="text-xs text-muted-foreground mt-1">{msg.phone}</p>
                  </div>
                   {msg.from === 'user' && <User className="h-8 w-8 text-secondary-foreground" />}
                </div>
              ))}
               <div ref={chatEndRef} />
            </CardContent>
            <form onSubmit={handleSendMessage} className="p-4 border-t">
               <div className="space-y-2">
                 <Label htmlFor="phone">Your Phone Number</Label>
                 <Input 
                   id="phone"
                   value={phone}
                   onChange={e => setPhone(e.target.value)}
                   placeholder="e.g. +14155552671"
                 />
               </div>
               <div className="mt-4 space-y-2">
                 <Label htmlFor="message">Message</Label>
                 <div className="flex gap-2">
                    <Input 
                      id="message"
                      value={message}
                      onChange={e => setMessage(e.target.value)}
                      placeholder='e.g. confirm BP-XYZ123'
                      disabled={isSending}
                    />
                    <Button type="submit" disabled={isSending}>
                      {isSending && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                      Send
                    </Button>
                  </div>
               </div>
            </form>
          </Card>
        </div>
        <div className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>How to Use</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4 text-sm text-muted-foreground">
              <p>This tool lets you test your app's WhatsApp logic without using Twilio.</p>
              <div>
                <h4 className="font-semibold text-foreground mb-1">Commands:</h4>
                <ul className="list-disc pl-5 space-y-1">
                    <li><code className="font-code text-xs">+[buyer-phone] [amount] [seller-wallet] [item]</code> - Create an escrow (as seller).</li>
                    <li><code className="font-code text-xs">confirm [escrow-id]</code> - Confirm delivery (as buyer).</li>
                    <li><code className="font-code text-xs">dispute [escrow-id]</code> - Raise a dispute.</li>
                    <li><code className="font-code text-xs">history</code> - Get your transaction history.</li>
                    <li><code className="font-code text-xs">help</code> - See all commands.</li>
                </ul>
              </div>
               <div>
                <h4 className="font-semibold text-foreground mb-1">Example:</h4>
                 <p>1. Set your phone as seller (e.g., +15550001).</p>
                 <p>2. Send: <code className="font-code text-xs">+15550002 50 0x... Vintage T-Shirt</code></p>
                 <p>3. Change phone to buyer's (+15550002).</p>
                 <p>4. Send: <code className="font-code text-xs">confirm BP-XXXXXX</code></p>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}
